name: terraform-environments-action
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
    secrets:
      ROLE_ARN:
        required: true
      AWS_PARAM_STORE_TF_BACKEND_KEY:
        required: true
      AWS_PARAM_STORE_TF_VARS_KEY:
        required: true
      SLACK_TOKEN:
        required: true
    env:
    SLACK_CHANNEL: tna-test
    SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
    GITHUB_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    ENV: ${{ inputs.environment }}
    LOG_GROUP_NAME: "terraform-plan-${{ inputs.environment }}"
    LOG_STREAM_NAME: "run-id-${{ github.run_id }}-attempt-${{ github.run_attempt }}"
jobs:
  plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Configure AWS credentials for test AWS role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: eu-west-2
          role-session-name: role-session-name-${{ github.actor }}-${{ github.triggering_actor }}
      - name: Checkout
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.4
          terraform_wrapper: false
      - name: Terraform Plan
        run: |
          terraform -v
          cd terraform-environments
          aws ssm get-parameters --name ${{ secrets.AWS_PARAM_STORE_TF_BACKEND_KEY }} --with-decryption --query "Parameters[*].Value" --output text >> backend.conf
          aws ssm get-parameters --name ${{ secrets.AWS_PARAM_STORE_TF_VARS_KEY }} --with-decryption --query "Parameters[*].Value" --output text >> terraform.tfvars
          pwd
          ls -la
          terraform init -backend-config=backend.conf -reconfigure
          terraform workspace list
          terraform workspace select ${{ inputs.environment }}
          terraform plan -var-file="terraform.tfvars" -out plan.out >> /dev/null
          terraform show -no-color plan.out >> plan.txt
          aws s3 cp plan.out s3://dev-te-testdata/tmp/${{ inputs.environment }}/${{ github.triggering_actor }}/plan.out
          ls -la
      - name: Send to Slack
        # env:
        #   SLACK_CHANNEL: tna-test
        #   SLACK_WEBHOOK: ${{ secrets.SLACK_TOKEN }}
        #   GITHUB_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        #   ENV: ${{ inputs.environment }}
        #   LOG_GROUP_NAME: "terraform-plan-${{ inputs.environment }}"
        #   LOG_STREAM_NAME: "run-id-${{ github.run_id }}-attempt-${{ github.run_attempt }}"
        run: | 
          pwd
          cd terraform-environments
          pip install boto3
          python3 script/log.py
      # - name: Upload Terraform Plan
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: terraform-plan
      #     path: terraform-environments/plan.out
      #     retention-days: 1

  approve:
    needs: 
      - plan
    runs-on: ubuntu-latest
    environment: poc-manual-step
    steps:
      - name: Manual Approve Info
        run: |
          terraform -v
          echo ${{ github.triggering_actor }}
          echo ${{ github.actor }}          
  apply:
    runs-on: ubuntu-latest
    needs: 
      - approve
    environment:  ${{ inputs.environment }}
    steps:
      - name: Configure AWS credentials for test AWS role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: eu-west-2
          role-session-name: role-session-name-${{ github.actor }}-${{ github.triggering_actor }}
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Download Terraform Plan
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: terraform-plan
      #     path: terraform-environments/
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.4
          terraform_wrapper: false
      - name: Terraform Apply
        run: |
          terraform -v
          ls -la
          cd terraform-environments
          aws ssm get-parameters --name ${{ secrets.AWS_PARAM_STORE_TF_BACKEND_KEY }} --with-decryption --query "Parameters[*].Value" --output text >> backend.conf
          aws ssm get-parameters --name ${{ secrets.AWS_PARAM_STORE_TF_VARS_KEY }} --with-decryption --query "Parameters[*].Value" --output text >> terraform.tfvars
          terraform init -backend-config=backend.conf -reconfigure
          terraform workspace list
          terraform workspace select ${{ inputs.environment }}
          aws s3 cp s3://dev-te-testdata/tmp/${{ inputs.environment }}/${{ github.triggering_actor }}/plan.out plan.out  
          terraform apply -input=false plan.out >> apply.out
