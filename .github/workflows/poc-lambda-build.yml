# Build poc-lambda component artifact
on:
  push:
    branches:
      - 'feature/**'
  pull_request:
    types: [opened, reopened]
    branches: [main]
  # Enable manual run; must also be in main branch to become visible though
  workflow_dispatch:
permissions:
  id-token: write  # required by aws-actions/configure-aws-credentials
jobs:
  poc-lambda-build:
    runs-on: ubuntu-latest
    env:
      python_version: '3.9'
      docker_image_name: 'poc-lambda'
      build_dir: 'poc-lambda'
    steps:
      - name: Diagnostic info
        run: |
          printf 'github.event.repository.name=%s\n' "${{ github.event.repository.name }}"
          printf 'github.api_url=%s\n' "${{ github.api_url }}"
          printf 'env.python_version=%s\n' "${{ env.python_version }}"
      - name: Checkout current
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}
      - name: Run tests
        run: |
          python3 --version
          cd poc-lambda
          python3 -m unittest discover ./tests -p 'test_*.py'
      - name: Get the version to use to tag this build
        id: build-tag
        uses: nationalarchives/tre-blueprint-test-repository/.github/actions/get-next-version@feature/DTE-433/lambda-deployment-example
        with:
          repo-name: ${{ github.event.repository.name }}
      - name: Diagnostic info
        run: |
          printf 'steps.build-tag.outputs.next-version=%s\n' "${{ steps.build-tag.outputs.next-version }}"
      - name: AWS credential setup
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: eu-west-2
          # triggering-actor could differ for re-runs: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
          role-session-name: role-session-name-${{ github.actor }}-${{ github.triggering_actor }}
      - name: AWS ECR login
        id: aws-ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker build, tag and push to AWS ECR
        env:
          REGISTRY: ${{ steps.aws-ecr-login.outputs.registry }}
          REGISTRY_PATH: /tre-v2/
          IMAGE_NAME: ${{ env.docker_image_name }}
          IMAGE_TAG: ${{ steps.build-tag.outputs.next-version }}
        run: |
          docker images
          docker build \
            --tag "${REGISTRY}${REGISTRY_PATH}${IMAGE_NAME}:${IMAGE_TAG}" \
            "${{ env.build_dir }}"
          docker images
          docker push "${REGISTRY}${REGISTRY_PATH}${IMAGE_NAME}:${IMAGE_TAG}"
